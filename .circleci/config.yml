version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    # parameters:
    #   workflow_id:
    #     type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            sleep 10
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            sleep 10
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
#            exit 1
# # echo "Destroying environment: << parameters.workflow_id >> " removed from first step of "command:"

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
    #   workflow_id: 
    #     type: string     
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # SUCCESS = 1

            SUCCESS=$(curl --insecure  https://kvdb.io/8V3XpyGAgimEzz3wTNVM9c/migration_${CIRCLE_WORKFLOW_ID:0:7})
          
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
                echo "Rolling back successful migration"
                cd ~/project/backend
                npm install
                npm run migration:revert
            fi  



#            # if(( $SUCCESS==1 )); 
#            # then


#            # Your Memstash or kvdb.io GET URL code goes here
#            # Example: Memstash.io
#            # SUCCESS=$(curl -H "token: e52b52de-ee26-41a5-86e8-e8dcc3d995a5" --request GET https://api.memstash.io/values/migration_<< parameters.workflow_id >>)
#            # Example: kvdb.io
#            # SUCCESS=$(curl --insecure  https://kvdb.io/9GE4jRtKznmVKRfvdBABBe/migration_<< parameters.workflow_id >>)




            
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
            #   exit 1
            # fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]     
      - run: 
          name: Scan front-end
          command: |
            cd frontend
            npm install
            #  npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical


  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]     
      - run: 
          name: Scan back-end
          command: |
            cd backend
            npm install
            #  npm install oauth-sign@^0.9.0
            npm audit fix --force     # --audit-level=critical --force
           # npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople2 \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} 

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --region us-east-1 \
              --filters Name=tag:project,Values=udapeople \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
#      - destroy-environment
#        when: on_fail      

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["d8:18:9a:f0:f2:55:19:ef:a3:65:7a:b4:29:ee:15:b2"]
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
#            exit 1
      - run:
          name: Configure server
          command: |
            cd ./.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
#            exit 1
#       # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      - image: circleci/node:13.8.0  #python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt

# from kvdb.io: 8V3XpyGAgimEzz3wTNVM9c

      - run:
          name: Send migration status to kvdb.io OR memstash.io
          command: |
              echo "insecure" >> ~/.curlrc
              if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
                  curl https://kvdb.io/8V3XpyGAgimEzz3wTNVM9c/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
#             exit 1
#      # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11  # amazon/aws-cli   # 
    steps:
      - checkout
      - attach_workspace:
          at: ~/

      # - run: 
      #     name: install dependencies
      #     command: |
      #       yum install -y tar gzip
#            apk add --update tar gzip


      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            apk add --update curl tar
            npm install webpack-dev-server -g
            npm install
            pip install awscli


      # - attach_workspace:
      #     at: ~/

      # - run:
      #     name: Install ansible
      #     command: |
      #       apk add --update ansible

      # - run:
      #     name: Install dependencies 2
      #     command: |
      #       apk add --update npm curl
#            apk add --update ansible

      # - run: 
      #     name: Install aws cli
      #     command: |
#            curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-linux-x86_64.zip" \
#            -o "awscliv2.zip" 
#            unzip awscliv2.zip 
#            ./aws/install


      # - run: 
      #     name: Deploy frontend objects
      #     command: |
      #       cd frontend
      #       npm install
      #       npm run build
      #       tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      #       aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 


      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      #       export API_URL="http://${BACKEND_IP}:3030"
      #       echo "${API_URL}"
      - run:
          name: Get backend URL
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --region us-east-1 \
              --filters Name=tag:project,Values=udapeople \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: | 
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive 
#            /usr/local/bin/aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive     
      #   # Here's where you will add some code to rollback on failure      


  deploy-backend:
    # Docker image here that supports Ansible
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
#          fingerprints: ["d8:18:9a:f0:f2:55:19:ef:a3:65:7a:b4:29:ee:15:b2"]
            fingerprints: ["bf:0f:3c:31:ab:f7:d0:1b:89:28:32:5e:24:41:5b:f5"]

      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update npm
            apk add --update tar gzip

      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -czvf artifact.tar.gz /root/project/backend
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            mkdir /root/project/.circleci/ansible/roles/deploy/files
            cp /root/project/artifact.tar.gz /root/project/.circleci/ansible/roles/deploy/files
            # cd /root/project/.circleci/ansible/roles/deploy/files
            # echo "after copy"
            # pwd
            # ls -al
            ansible-playbook -i inventory.txt deploy-backend.yml
#                     tar -C backend -czvf artifact.tar.gz .

      # Here's where you will add some code to rollback on failure  


  smoke-test:
    docker:
      - image: python:3.7-alpine3.11   
    # docker:
      # Lightweight Docker image 
    steps:
      - checkout 
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            apk add --update npm
            pip install awscli

        #things I took out of update command above:
        # ansible, tar, gzip
      # - run:
      #     name: Get backend url
      #     command: |
      #       # your code here
      - run:
          name: Backend smoke test.
          command: |
              # echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              # echo AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID  >> "backend/.env"
              # echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> "backend/.env"
              # echo AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY >> "backend/.env"
              # echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "backend/.env"
              # echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
              # echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "backend/.env"
              # echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              # echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "backend/.env"
              # echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "backend/.env"
              # echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
              # echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              # echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              # Fetch and prepare the BACKEND_IP env var
              export BACKEND_IP=$(aws ec2 describe-instances \
              --region us-east-1 \
              --filters Name=tag:project,Values=udapeople \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              sleep 60
              export API_URL="http://${BACKEND_IP}:3030"
              echo "${API_URL}"
              if curl "${API_URL}/api/status" | grep "ok"
              then
                  return 1
              else
                  return 0
              fi
      - run:
          name: Frontend smoke test.
          command: |
              URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
              echo ${URL} 
              if curl -s ${URL} | grep "Welcome"
              then
                  # Change this to 0 after the job fails
                return 1
              else
                return 1
              fi

      - destroy-environment
      - revert-migrations
        # workflow_id: "${CIRCLE_WORKFLOW_ID}"
              
      # Here's where you will add some code to rollback on failure  


#   cloudfront-update:
#     # docker:
#       # Docker image here that supports AWS CLI
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     # docker:
#       # Docker image here
#     steps:
#       # Checkout code from git
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]